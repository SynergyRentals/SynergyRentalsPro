openapi: 3.0.0
info:
  title: SynergyOps API
  description: API documentation for the SynergyOps property management system
  version: 1.0.0
servers:
  - url: /api
    description: Base API path

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, ops, user]
    Property:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        active:
          type: boolean
        icalUrl:
          type: string
          nullable: true
    GuestyProperty:
      type: object
      properties:
        id:
          type: integer
        propertyId:
          type: string
        name:
          type: string
        address:
          type: string
        bedrooms:
          type: integer
          nullable: true
        bathrooms:
          type: integer
          nullable: true
        amenities:
          type: array
          items:
            type: string
        icalUrl:
          type: string
          nullable: true
    HostAITask:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
          enum: [new, pending, processed, completed]
        description:
          type: string
        guestName:
          type: string
          nullable: true
        guestEmail:
          type: string
          nullable: true
        hostAiAction:
          type: string
          nullable: true
    AutopilotSettings:
      type: object
      properties:
        enabled:
          type: boolean
        confidenceThreshold:
          type: number
          minimum: 0
          maximum: 1
        userId:
          type: integer
    Error:
      type: object
      properties:
        message:
          type: string

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /auth/login:
    post:
      summary: Log in to the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      summary: Log out from the application
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /user:
    get:
      summary: Get current user information
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /properties:
    get:
      summary: Get all properties
      security:
        - cookieAuth: []
      responses:
        '200':
          description: A list of properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      summary: Create a new property
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                icalUrl:
                  type: string
                  nullable: true
              required:
                - name
                - address
      responses:
        '201':
          description: Property created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /properties/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get property by ID
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Property details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    patch:
      summary: Update property
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                icalUrl:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Property updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      summary: Delete property
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Property deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFoundError'

  /hostai/tasks:
    get:
      summary: Get all HostAI tasks
      security:
        - cookieAuth: []
      responses:
        '200':
          description: A list of HostAI tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostAITask'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /hostai/tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get HostAI task by ID
      security:
        - cookieAuth: []
      responses:
        '200':
          description: HostAI task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostAITask'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    patch:
      summary: Update HostAI task
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [new, pending, processed, completed]
                notes:
                  type: string
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostAITask'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /hostai/tasks/status/{status}:
    parameters:
      - name: status
        in: path
        required: true
        schema:
          type: string
          enum: [new, pending, processed, completed]
    get:
      summary: Get HostAI tasks by status
      security:
        - cookieAuth: []
      responses:
        '200':
          description: HostAI tasks with specified status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HostAITask'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /settings/hostai-autopilot:
    get:
      summary: Get HostAI autopilot settings
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Autopilot settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutopilotSettings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    patch:
      summary: Update HostAI autopilot settings
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                confidenceThreshold:
                  type: number
                  minimum: 0
                  maximum: 1
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutopilotSettings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'